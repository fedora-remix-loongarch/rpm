changeset:   6194:fe6fc6dc7b98
tag:         tip
user:        Panu Matilainen <pmatilai@redhat.com>
date:        Wed Oct 24 10:31:42 2007 +0300
summary:     Use NEVRA, not NEVR everywhere for rpmProblems

diff -r cc2abc150d64 -r fe6fc6dc7b98 lib/rpmfi.c
--- a/lib/rpmfi.c	Wed Oct 24 09:50:13 2007 +0300
+++ b/lib/rpmfi.c	Wed Oct 24 10:31:42 2007 +0300
@@ -815,7 +815,7 @@ assert(p != NULL);
 	    if (j == numValid && !allowBadRelocate && actions) {
 		rpmps ps = rpmtsProblems(ts);
 		rpmpsAppend(ps, RPMPROB_BADRELOCATE,
-			rpmteNEVR(p), rpmteKey(p),
+			rpmteNEVRA(p), rpmteKey(p),
 			relocations[i].oldPath, NULL, NULL, 0);
 		ps = rpmpsFree(ps);
 	    }
diff -r cc2abc150d64 -r fe6fc6dc7b98 lib/rpmts.c
--- a/lib/rpmts.c	Wed Oct 24 09:50:13 2007 +0300
+++ b/lib/rpmts.c	Wed Oct 24 10:31:42 2007 +0300
@@ -1356,14 +1356,14 @@ void rpmtsCheckDSIProblems(const rpmts t
 
 	if (dsi->bavail >= 0 && adj_fs_blocks(dsi->bneeded) > dsi->bavail) {
 	    rpmpsAppend(ps, RPMPROB_DISKSPACE,
-			rpmteNEVR(te), rpmteKey(te),
+			rpmteNEVRA(te), rpmteKey(te),
 			ts->filesystems[i], NULL, NULL,
  	   (adj_fs_blocks(dsi->bneeded) - dsi->bavail) * dsi->bsize);
 	}
 
 	if (dsi->iavail >= 0 && adj_fs_blocks(dsi->ineeded) > dsi->iavail) {
 	    rpmpsAppend(ps, RPMPROB_DISKNODES,
-			rpmteNEVR(te), rpmteKey(te),
+			rpmteNEVRA(te), rpmteKey(te),
 			ts->filesystems[i], NULL, NULL,
  	    (adj_fs_blocks(dsi->ineeded) - dsi->iavail));
 	}
diff -r cc2abc150d64 -r fe6fc6dc7b98 lib/transaction.c
--- a/lib/transaction.c	Wed Oct 24 09:50:13 2007 +0300
+++ b/lib/transaction.c	Wed Oct 24 10:31:42 2007 +0300
@@ -138,7 +138,7 @@ static int handleInstInstalledFiles(cons
 	mi = rpmtsInitIterator(ts, RPMDBI_PACKAGES,
 			&shared->otherPkg, sizeof(shared->otherPkg));
 	while ((h = rpmdbNextIterator(mi)) != NULL) {
-	    altNEVR = hGetNEVR(h, NULL);
+	    altNEVR = hGetNEVRA(h, NULL);
 	    otherFi = rpmfiNew(ts, h, RPMTAG_BASENAMES, scareMem);
 	    break;
 	}
@@ -214,7 +214,7 @@ static int handleInstInstalledFiles(cons
 
 	    if (rConflicts) {
 		rpmpsAppend(ps, RPMPROB_FILE_CONFLICT,
-			rpmteNEVR(p), rpmteKey(p),
+			rpmteNEVRA(p), rpmteKey(p),
 			rpmfiDN(fi), rpmfiBN(fi),
 			altNEVR,
 			0);
@@ -603,9 +603,9 @@ assert(otherFi != NULL);
 
 		if (rConflicts) {
 		    rpmpsAppend(ps, RPMPROB_NEW_FILE_CONFLICT,
-			rpmteNEVR(p), rpmteKey(p),
+			rpmteNEVRA(p), rpmteKey(p),
 			fn, NULL,
-			rpmteNEVR(otherFi->te),
+			rpmteNEVRA(otherFi->te),
 			0);
 		}
 	    }
@@ -703,9 +703,9 @@ static int ensureOlder(rpmts ts,
 
     if (rc == 0) {
 	rpmps ps = rpmtsProblems(ts);
-	const char * altNEVR = hGetNEVR(h, NULL);
+	const char * altNEVR = hGetNEVRA(h, NULL);
 	rpmpsAppend(ps, RPMPROB_OLDPACKAGE,
-		rpmteNEVR(p), rpmteKey(p),
+		rpmteNEVRA(p), rpmteKey(p),
 		NULL, NULL,
 		altNEVR,
 		0);
@@ -1508,14 +1508,14 @@ rpmMessage(RPMMESS_DEBUG, _("sanity chec
 	if (!(rpmtsFilterFlags(ts) & RPMPROB_FILTER_IGNOREARCH) && !tscolor)
 	    if (!archOkay(rpmteA(p)))
 		rpmpsAppend(ps, RPMPROB_BADARCH,
-			rpmteNEVR(p), rpmteKey(p),
+			rpmteNEVRA(p), rpmteKey(p),
 			rpmteA(p), NULL,
 			NULL, 0);
 
 	if (!(rpmtsFilterFlags(ts) & RPMPROB_FILTER_IGNOREOS))
 	    if (!osOkay(rpmteO(p)))
 		rpmpsAppend(ps, RPMPROB_BADOS,
-			rpmteNEVR(p), rpmteKey(p),
+			rpmteNEVRA(p), rpmteKey(p),
 			rpmteO(p), NULL,
 			NULL, 0);
 
@@ -1544,7 +1544,7 @@ rpmMessage(RPMMESS_DEBUG, _("sanity chec
 
 	    while (rpmdbNextIterator(mi) != NULL) {
 		rpmpsAppend(ps, RPMPROB_PKG_INSTALLED,
-			rpmteNEVR(p), rpmteKey(p),
+			rpmteNEVRA(p), rpmteKey(p),
 			NULL, NULL,
 			NULL, 0);
 		/*@innerbreak@*/ break;

